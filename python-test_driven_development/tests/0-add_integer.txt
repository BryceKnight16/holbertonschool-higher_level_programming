We are importing add-integer from the module add_integer:
	>>> add_integer = __import__("0-add_integer").add_integer

We are testing add_integer with 2 and 3 and should return 5:
	>>> add_integer(2, 3)
	5

We are testing add_integer with no parameters
	>>> add_integer(None)
       	Traceback (most recent call last):
	...
	TypeError: a must be an integer

We are testing add_integer with only one parameter
       >>> add_integer(2)
       100

We are testing add_integer with a string and an integer and it should raise a TypeError exception with the mesaage "a must be an integer":
	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

We are testing add_integer with an integer and a string and it should raise a TypeError exception with the mesaage "b must be an integer":
	>>> add_integer(2, "Bye!")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer


We are testing add_integer with two ints to show that the return value is of type int
	>>> res = add_integer(2, 3)
	>>> True if isinstance(res, int) else False
	True


We are testing add_integer with an int and a float to show that the return value is of type int
	>>> res = add_integer(2, 3.456)
	>>> True if isinstance(res, int) else False
	True


We are testing add_integer with an float and an int to show that the return value is of type int
	>>> res = add_integer(2.234, 3)
	>>> True if isinstance(res, int) else False
	True


We are testing add_integer with two floats to show that the return value is of type int
	>>> res = add_integer(2.234, 3.456)
	>>> True if isinstance(res, int) else False
	True


We are testing add_integer to show that it is rounding to the correct integer
       >>> add_integer(2.1, 3.1)
       5


We are testing add_integer to show that it is rounding first before adding
       >>> add_integer(2.5, 3.5)
       5


We are testing add_integer NaN
       >>> add_integer(float('NaN'))
       Traceback (most recent call last):
       ...
       ValueError: cannot convert float NaN to integer


We are testing add_integer for any float overflow
       >>> add_integer(float('inf'))
       Traceback (most recent call last):
       ...
       OverflowError: cannot convert float infinity to integer
